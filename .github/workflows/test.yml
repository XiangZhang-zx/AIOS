# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: AIOS Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    # Install AIOS dependencies first
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install -e .
    
    # Clone and install Cerebrum
    - name: Git Clone Cerebrum
      uses: sudosubin/git-clone-action@v1.0.1
      with:
        repository: agiresearch/Cerebrum
        path: Cerebrum
    
    - name: Install Cerebrum
      run: |
        python -m pip install -e Cerebrum/
    
    - name: Run AIOS kernel in background
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        # Start kernel and save PID
        bash runtime/launch_kernel.sh &>kernel.log &
        KERNEL_PID=$!
        
        # Set maximum wait time (10 seconds)
        max_wait=10
        start_time=$SECONDS
        
        # Dynamically check if the process is running until it succeeds or times out
        while true; do
          if ! ps -p $KERNEL_PID > /dev/null; then
            echo "Kernel process died. Checking logs:"
            cat kernel.log
            exit 1
          fi
          
          if nc -z localhost 8000; then
            if curl -s http://localhost:8000/health; then
              echo "Kernel successfully started and healthy"
              break
            fi
          fi
          
          # Check if timed out
          elapsed=$((SECONDS - start_time))
          if [ $elapsed -ge $max_wait ]; then
            echo "Timeout after ${max_wait} seconds. Kernel failed to start properly."
            cat kernel.log
            exit 1
          fi
          
          echo "Waiting for kernel to start... (${elapsed}s elapsed)"
          sleep 1
        done
    
    - name: Run the run-agent code
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        # Debug info
        echo "Checking kernel status..."
        curl -v http://localhost:8000/health || true
        
        echo "Network status:"
        netstat -tlpn | grep 8000 || true
        
        # Run agent
        run-agent \
          --llm_name gemini-1.5-flash \
          --llm_backend google \
          --agent_name_or_path demo_author/demo_agent \
          --task "Tell me what is core idea of AIOS" \
          --aios_kernel_url http://localhost:8000 \
          2>&1 | tee agent.log
    
    - name: Upload a Build Artifact
      if: always()  # Upload logs even if job fails
      uses: actions/upload-artifact@v4.4.3
      with:
        name: logs
        path: |
          kernel.log
          agent.log
    
    - name: Collect debug information
      if: failure()
      run: |
        echo "=== Kernel Logs ==="
        cat kernel.log
        echo "=== Environment Variables ==="
        env | grep -i api_key || true
        echo "=== Process Status ==="
        ps aux | grep kernel
